on: [push, pull_request]

name: CI

jobs:
  fmt:
    name: Check Formatting
    runs-on: ubuntu-latest
    steps:
      - run: sudo apt update && sudo apt install -y libgtk-3-dev
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - run: sudo apt update && sudo apt install -y libgtk-3-dev
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
          override: true
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - run: sudo apt update && sudo apt install -y libgtk-3-dev
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo
      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace

  build:
    name: Build (${{ matrix.runs_on }})
    runs-on: ${{ matrix.runs_on }}
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: linux
            runs_on: ubuntu-latest
          - os: macos
            runs_on: macos-latest
          - os: windows
            runs_on: windows-latest
    steps:
      - if: ${{ matrix.os=='linux' }}
        run: sudo apt update && sudo apt install -y libgtk-3-dev
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}
          path: |
            target/release/sidenotes
            target/release/sidenotes.exe
          if-no-files-found: error
  test-release:
    strategy:
      matrix:
        # For these target platforms
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-20.04
            install-dist: curl --proto '=https' --tlsv1.2 -L -sSf https://github.com/axodotdev/cargo-dist/releases/download/v0.0.2/installer.sh | sh
          - target: x86_64-apple-darwin
            os: macos-11
            install-dist: curl --proto '=https' --tlsv1.2 -L -sSf https://github.com/axodotdev/cargo-dist/releases/download/v0.0.2/installer.sh | sh
          - target: x86_64-pc-windows-msvc
            os: windows-2019
            install-dist: irm 'https://github.com/axodotdev/cargo-dist/releases/download/v0.0.2/installer.ps1' | iex
    runs-on: ${{ matrix.os }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - name: Install packages (Linux)
        if: runner.os == 'Linux'
        run: sudo apt update && sudo apt install -y libgtk-3-dev
      - name: Install Rust
        run: rustup update stable && rustup default stable
      - name: Install cargo-dist
        run: ${{ matrix.install-dist }}
      - name: Run cargo-dist
        # This logic is a bit janky because it's trying to be a polyglot between
        # powershell and bash since this will run on windows, macos, and linux!
        # The two platforms don't agree on how to talk about env vars but they
        # do agree on 'cat' and '$()' so we use that to marshal values between commmands.
        run: |
          # Actually do builds and make zips and whatnot
          cargo dist --target=${{ matrix.target }} --output-format=json > dist-manifest.json
          echo "dist ran successfully"
